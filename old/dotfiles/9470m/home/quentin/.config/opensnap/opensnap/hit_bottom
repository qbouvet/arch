#!/bin/sh

    #   Default arguments
WINDOW_ID="$1"
SCREEN_WIDTH="$2"
SCREEN_HEIGHT="$3"
SCREEN_OFFSET_X="$4"
SCREEN_OFFSET_Y="$5"

    #  Ugly, but no choice
    #  https://github.com/lawl/opensnap/issues/15
    #  Put mouse position in X, Y variables
eval $(xdotool getmouselocation --shell)
mouse_x="$X"
mouse_y="$Y"

    #   Boundaries definitions
horiz_divider=6 # divide screen in x parts, then only 1st and last parts will trigger snaps
vert_divider=6  # divide screen in x parts, then only 1st and last parts will trigger snaps    
x_left_boundary=$(( SCREEN_WIDTH / "$horiz_divider"))                           # Before this, we snap bot-left
x_right_boundary=$(( ("$horiz_divider"-1) * SCREEN_WIDTH / "$horiz_divider" ))  # Beyond this, we snap bot-right
y_top_boundary=$(( SCREEN_HEIGHT / "$vert_divider" ))                           # Unused here
y_bot_boundary=$(( ("$vert_divider"-1) * SCREEN_HEIGHT / "$vert_divider" ))     # Unused here

    #   Some precomputed values
tint2_width="46"        # hardcoded dock/bar width
decoration_height="30"  # Hardcoded windows decoration (= header, topbar) height
full_screen_width="$(( $SCREEN_WIDTH - $tint2_width ))"
full_screen_height="$(( SCREEN_HEIGHT - $decoration_height ))"
half_screen_width="$(( ($(($SCREEN_WIDTH-$tint2_width)) /2 ) -1 ))"
half_screen_height="$(( ($SCREEN_HEIGHT /2) - $decoration_height ))"
half_screen_x="$(( $half_screen_width +1 + $tint2_width ))"
half_screen_y="$(( $SCREEN_HEIGHT /2 ))"

    # case : Default values
gravity="0"
target_height="$half_screen_height"
target_y="$half_screen_y"
target_width="$full_screen_width"
target_x="$tint2_width"
    # case : snap bot-left
if [ "$mouse_x" -lt "$x_left_boundary" ]; then
    tprint "snapping bot-left"
    target_x="$target_x"
    target_width="$half_screen_width"
    # case : snap bot-right
elif [ "$mouse_x" -gt "$x_right_boundary" ]; then
    tprint "snapping bot-right"
    target_x="$half_screen_x"
    target_width="$half_screen_width"
fi

    #
    #   Debug
    #
#source /scripts/utils.sh
#tprint -d 60s "\
#hit_bottom
#
#args : $@
#
#leftb : $x_left_boundary, rightb : $x_right_boundary
#topb : $y_top_boundary, botb : $y_bot_boundary
#
#full_screen_height : $full_screen_height
#half_screen_height : $half_screen_height
#
#full_screen_width : $full_screen_width
#half_screen_width : $half_screen_width
#
#MOUSE : ($mouse_x, $mouse_y)
#
#target pos : x=$target_x y=$target_y
#target_width : $target_width
#target_height : $target_height
#
#issuing command : 
#wmctrl -i -r $WINDOW_ID -e $gravity,$target_x,$target_y,$target_width,$target_height
#"

    #
    #   Apply stuff
    #
    # we need to remove the maximized_horz attribute in case the window was maximized with hit_top before
wmctrl -i -r "$WINDOW_ID" -b remove,maximized_horz
wmctrl -i -r "$WINDOW_ID" -b remove,maximized_vert
    # maximize it vertically via EWMH so padding (taskbar for example) is respected
#wmctrl -i -r "$WINDOW_ID" -b add,maximized_vert
    # change position and size of the window
wmctrl -i -r "$WINDOW_ID" -e $gravity,$target_x,$target_y,$target_width,$target_height


