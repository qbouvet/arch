#!/bin/sh

    #   Default arguments
WINDOW_ID="$1"
SCREEN_WIDTH="$2"
SCREEN_HEIGHT="$3"
SCREEN_OFFSET_X="$4"
SCREEN_OFFSET_Y="$5"

    #  Ugly, but no choice
    #  https://github.com/lawl/opensnap/issues/15
    #  Put mouse position in X, Y variables
eval $(xdotool getmouselocation --shell)
mouse_x="$X"
mouse_y="$Y"

    #   Boundaries definitions
horiz_divider=6 # divide screen in x parts, then only 1st and last parts will trigger snaps
vert_divider=6  # divide screen in x parts, then only 1st and last parts will trigger snaps    
x_left_boundary=$(( SCREEN_WIDTH / "$horiz_divider"))                           # Unused here (bot boundary)
x_right_boundary=$(( ("$horiz_divider"-1) * SCREEN_WIDTH / "$horiz_divider" ))  # Unused here (bot boundary)
y_top_boundary=$(( SCREEN_HEIGHT / "$vert_divider" ))                           # Before this, we snap top-left
y_bot_boundary=$(( ("$vert_divider"-1) * SCREEN_HEIGHT / "$vert_divider" ))     # Beyond this, we snap bot-left

    #   Some precomputed values
tint2_width=45  # hardcoded dock/bar width
full_screen_width="$(( $SCREEN_WIDTH - $tint2_width ))"
full_screen_height="$SCREEN_HEIGHT"
half_screen_width="$(( $(($SCREEN_WIDTH-$tint2_width)) /2 ))"
half_screen_height="$(( $SCREEN_HEIGHT /2 ))"

#source /scripts/utils.sh
#tprint -d 10s "leftb : $x_left_boundary, rightb : $x_right_boundary\ntopb : $y_top_boundary, botb : $y_bot_boundary"
#tprint -d 10s "MOUSE : ($mouse_x, $mouse_y)"

    # case : Default values
gravity="0"
target_height="$full_screen_height"
target_y="0"
target_width="$half_screen_width"
target_x="$tint2_width"
    # case : snap top-left
if [ "$mouse_y" -lt "$y_top_boundary" ]; then
    target_y="0"
    target_height="$half_screen_height"
    # case : snap bot-left
elif [ "$mouse_y" -gt "$y_bot_boundary" ]; then
    target_y="$half_screen_height"
    target_height="$half_screen_height"
fi

    #
    #   Apply stuff
    #
    # we need to remove the maximized_horz attribute in case the window was maximized with hit_top before
wmctrl -i -r "$WINDOW_ID" -b remove,maximized_horz
wmctrl -i -r "$WINDOW_ID" -b remove,maximized_vert
    # maximize it vertically via EWMH so padding (taskbar for example) is respected
#wmctrl -i -r "$WINDOW_ID" -b add,maximized_vert
    # change position and size of the window
wmctrl -i -r "$WINDOW_ID" -e $gravity,$target_x,$target_y,$target_width,$target_height
