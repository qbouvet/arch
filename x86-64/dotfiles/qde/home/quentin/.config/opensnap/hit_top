#!/bin/sh

echo "#=======#"
echo "hit_top"

    #   Arguments provided by opensnap
WINDOW_ID="$1"
SCREEN_WIDTH="$2"
SCREEN_HEIGHT="$3"
SCREEN_OFFSET_X="$4"
SCREEN_OFFSET_Y="$5"

    #   Do some common maths
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$DIR/commons"

    # case : Default values
gravity="0"
target_height="$half_screen_height"
target_y="0"
target_width="$full_screen_width"
target_x="$tint2_width"
    # case : snap top-left
if [ "$mouse_x" -lt "$x_left_boundary" ]; then
    target_x="$target_x"
    target_width="$half_screen_width"
    # case : snap top-right
elif [ "$mouse_x" -gt "$x_right_boundary" ]; then
    target_x="$half_screen_x"
    target_width="$half_screen_width"
fi

    #
    #   Debug
    #
printf "
leftb : $x_left_boundary, rightb : $x_right_boundary
topb : $y_top_boundary, botb : $y_bot_boundary

full_screen_height : $full_screen_height
half_screen_height : $half_screen_height

full_screen_width : $full_screen_width
half_screen_width : $half_screen_width

MOUSE : ($mouse_x, $mouse_y)

target pos : x=$target_x y=$target_y
target_width : $target_width
target_height : $target_height

issuing command : 
wmctrl -i -r $WINDOW_ID -e $gravity,$target_x,$target_y,$target_width,$target_height
"

    #
    #   Apply stuff
    #
    # we need to remove the maximized_horz attribute in case the window was maximized with hit_top before
wmctrl -i -r "$WINDOW_ID" -b remove,maximized_horz
wmctrl -i -r "$WINDOW_ID" -b remove,maximized_vert
    # maximize it vertically via EWMH so padding (taskbar for example) is respected
#wmctrl -i -r "$WINDOW_ID" -b add,maximized_vert
    # change position and size of the window
wmctrl -i -r "$WINDOW_ID" -e $gravity,$target_x,$target_y,$target_width,$target_height

